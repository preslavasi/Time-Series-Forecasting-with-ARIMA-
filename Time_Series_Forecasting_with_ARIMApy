# -*- coding: utf-8 -*-
"""
Created on Fri Mar 29 11:13:19 2019

@author: Preslava Ivanova
"""
# Importing data
from pandas import Series
from pandas import DataFrame
from statsmodels.tsa.arima_model import ARIMA
from matplotlib import pyplot
from pandas.tools.plotting import autocorrelation_plot
from statsmodels.tsa.stattools import acf
from statsmodels.graphics.tsaplots import plot_acf
from sklearn.metrics import mean_squared_error
from math import sqrt
series = Series.from_csv('USGDP70-91.csv', header=0)
print series

# Running an ACF to define p for 80 lags
lag_acf = acf(series, nlags=80)
pyplot.figure()
plot_acf(lag_acf)
pyplot.title('Autocorrelation Function')
pyplot.show()

# Running and ACF for p graph for 80 lags
autocorrelation_plot(series)
pyplot.show()

# Testing for ARIMA (1,1,0)
print 'START ARIMA(1,1,0) for US GDP '
model = ARIMA(series.values, order=(1,1,0))
model_fit = model.fit(disp=0)
print(model_fit.summary())

# Plotting residual errors 
residuals = DataFrame(model_fit.resid)
residuals.plot()
pyplot.show()
residuals.plot(kind='kde')
pyplot.show() # Similar to normal distribution
print(residuals.describe())

# Fitting the model for t+1 period
AF = model_fit.forecast()[0]
print('forecast value for t+1=''%f' % AF)
print #forecast value for t+1=4885.149233

# Rolling forecast for ARIMA 
X = series.values
size = int(len(X) * 0.66)
train = X[0:size]
test = X[size:len(X)]
history = [x for x in train]
predictions = list()
for t in range(len(test)):
	model = ARIMA(history, order=(1,1,0))
	model_fit = model.fit(disp=0)
	output = model_fit.forecast()
	yhat = output[0]
	predictions.append(yhat)
	obs = test[t]
	history.append(obs)
	print('=%i, predicted=%f, expected(real)=%f' % (size+t,yhat, obs))
print(history)

# Fitting the model for t+1 period
model = ARIMA(history, order=(1,1,0))
AF1 = model_fit.forecast()[0]
print('forecast value for t+1=''%f' % AF1) # forecast value for t+1=4885.343564
rmse = sqrt(mean_squared_error(test, predictions))
print('Test RMSE: %.3f' % rmse) # Test RMSE: 22.373

# Testing for ARIMA(1,1,1)
print 'START ARIMA(1,1,0) for US GDP '
model_new = ARIMA(series.values, order=(1,1,1))
model_new_fit = model_new.fit(disp=0)
print(model_new_fit.summary())

# Plotting residual errors 
residuals_new = DataFrame(model_new_fit.resid)
residuals_new.plot()
pyplot.show()
residuals_new.plot(kind='kde')
pyplot.show()
print(residuals_new.describe())

# Fitting the model for t+1 period
AF_new = model_new_fit.forecast()[0]
print('forecast value for t+1=''%f' % AF) # forecast value for t+1=4885.149233
print

# Rolling forecast for ARIMA 
X = series.values
size = int(len(X) * 0.66)
train_new = X[0:size]
test_new = X[size:len(X)]
history_new = [x for x in train_new]
predictions_new = list()
for t in range(len(test_new)):
	model_111 = ARIMA(history_new, order=(1,1,1))
	model_new_fit = model_new.fit(disp=0)
	output_new = model_new_fit.forecast()
	yhat_new = output[0]
	predictions_new.append(yhat_new)
	obs_new = test_new[t]
	history_new.append(obs)
	print('=%i, predicted=%f, expected(real)=%f' % (size+t,yhat, obs))
print(history)

# Fitting the model for t+1 period
model_new = ARIMA(history_new, order=(1,1,1))
AF1_new = model_new_fit.forecast()[0]
print('forecast value for t+1=''%f' % AF1_new) # forecast value for t+1=4885.112289
rmse_new = sqrt(mean_squared_error(test_new, predictions_new))
print('Test RMSE: %.3f' % rmse_new) # Test RMSE: 131.667
